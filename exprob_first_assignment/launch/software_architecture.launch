<launch>
    <!-- Run the architecture's component and allow to test it through a simple keyboard-based interface. -->

    <rosparam param="state/initial_pose"> [0.0,  0.0] </rosparam>

    <rosparam param="config/user_pose"> [5.0,  5.0] </rosparam>
    <rosparam param="config/environment_size"> [10.0, 10.0] </rosparam>

    <rosparam param="test/random_motion_time"> [0.1, 2.0] </rosparam>
    <rosparam param="test/random_plan_points"> [2, 8] </rosparam>
    <rosparam param="test/random_plan_time"> [0.1, 1.0] </rosparam>

    <rosparam param="test/random_sense/active"> False </rosparam>
    
    <rosparam param="state_machine/explore_time"> 5.0 </rosparam>
    <rosparam param="state_machine/charge_time"> 5.0 </rosparam>
    
    <arg name="ontology_path" default="/home/emanuelerambaldi/topological_map_protege/" />
    <arg name="ontology_name" default="test_ontology" />
    

    <node pkg = "exprob_first_assignment"  
          type = "robot_states.py" 
          name = "robot_states"
          launch-prefix = "x-terminal-emulator -e"
          output = "screen"
    > </node>
    
    <node pkg = "exprob_first_assignment"  
          type = "planner.py"
          name = "planner"
          output = "screen"
    > </node>
    
    <node pkg = "exprob_first_assignment"  
          type = "controller.py"
          name = "controller"
          output = "screen"
    > </node>
    
    <node pkg = "exprob_first_assignment"  
          type = "state_machine.py"
          name = "state_machine"
          launch-prefix = "x-terminal-emulator -e"
          output = "screen"
          args = "$(arg ontology_path) $(arg ontology_name)"
    > </node>
    
</launch>
